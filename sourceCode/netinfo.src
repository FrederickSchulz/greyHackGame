// netinfo
if params.len < 1 or params.len > 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: "+program_path.split("/")[-1]+" [ip_address] [port]</b>")

// try to load library from /lib or current folder
importLib = function(libName)
	if not libName or not typeof(libName) == "string" then exit("Error: libName needs to be a string")
	library = include_lib("/lib/" + libName)
	if not library then
    	library = include_lib(current_path + "/" + libName)
	end if
	if not library then exit("Error: Can't find " + libName + " library in the /lib path or the current folder " + current_path)
	return library;
end function

// moves through folders parents and returns reference to the parent "/" folder
// param1: reference to a folder
getRootFolder = function(folder)
	currentFolder = folder
	while currentFolder.name != "/"
		print("Moving to: " + currentFolder.parent.name);
		currentFolder = currentFolder.parent;
	end while
	return currentFolder;
end function

// gather typical sensitive information
// param1: reference to the "/" folder
printSesitiveInfo = function(rootFolder)
	getFolder = function(folderName)
		for folder in rootFolder.get_folders
			if folder.name == folderName then return folder;
		end for
		return null;
	end function

	print("Trying to get pwd content...")
	etcFolder = getFolder("etc")
	if etcFolder then
		for file in etcFolder.get_files
			if file.name == "passwd" then print(file.get_content);
		end for
	end if
	
	print("Trying to get home folder content...")
	homeFolder = getFolder("home")
	if homeFolder then
		for userFolder in homeFolder.get_folders
			print(userFolder.name)
		end for
	end if
end function

handleExploitResult = function(exploitResult)
resultType = typeof(exploitResult);
print("Handling exploit result type: " + resultType);
if resultType == "shell" then
	print("Obtained shell");
	computer = exploitResult.host_computer
	rootFolder = computer.File("/");
	printSesitiveInfo(rootFolder);
	option = user_input("start terminal for this shell? (y/n)")
	if option == "y" then
		exploitResult.start_terminal;
	else
		return true;
	end if
else if resultType == "file" then
	if not exploitResult.is_folder then 
		print("Obtained file: " + exploitResult.name)
		print("With content:")
		print(exploitResult.get_content)
		return true;
	else
		print("Obtained folder: " + exploitResult.name);
		// print folder names
		print("folders in " + exploitResult.name + " are:")
		folders = exploitResult.get_folders
		for folder in folders
			print(folder.name)
		end for
		// print file names
		print("files in " + exploitResult.name + " are:")
		files = exploitResult.get_files
		for file in files
			print(file.name)
		end for
		rootFolder = getRootFolder(exploitResult);
		printSesitiveInfo(rootFolder)
		return true;
	end if
else if resultType == "computer" then
	rootFolder = exploitResult.File("/")
	printSesitiveInfo(rootFolder)
	return true;
else if resultType == "null" then
	return true;
end if
end function


metaxploit = importLib("metaxploit.so");

// init params
address = params[0]
port = null; if params.len == 2 then port = params[1].to_int;
net_session = null
// connect session
if port then 
	net_session = metaxploit.net_use( address, port )
else 
	net_session = metaxploit.net_use( address )
end if

if not net_session then exit("Error: can't connect to net session")

// Requirement object initialization
Requirements = {}
Requirements.registered_users = 0;
Requirements.active_users = 0;
Requirements.active_root_user = 0;
Requirements.conn_gateway = 0;
Requirements.port_forwards = 0;

sessionMetaData = new Requirements;
sessionMetaData.registered_users = net_session.get_num_users;
sessionMetaData.active_users = net_session.is_any_active_user;
sessionMetaData.active_root_user = net_session.is_root_active_user;
sessionMetaData.conn_gateway = net_session.get_num_conn_gateway;
sessionMetaData.port_forwards = net_session.get_num_portforward;

print("registered users:    " + sessionMetaData.registered_users)
print("active user:         " + sessionMetaData.active_users)
print("active root user:    " + sessionMetaData.active_root_user)
print("connection gateways: " + sessionMetaData.conn_gateway)
print("port forwards:       " + sessionMetaData.port_forwards)

metaLib = net_session.dump_lib
print("scanning lib " + metaLib.lib_name + " in version " + metaLib.version) 
memoryList = metaxploit.scan(metaLib)

Exploit = {};
exploitList = [];
for mem in memoryList
	addressScan = metaxploit.scan_address(metaLib, mem);
	unsafeChecks = addressScan.split("Unsafe check: ");
	unsafeChecks.remove(0)
	for unsafeCheck in unsafeChecks
		exploit = new Exploit;
		exploit.mem_address = mem;
		exploit.unsec_value = null;
		exploit.requirements = [];
		exploit.printObject = function()
			print(self.mem_address)
			print(self.unsec_value)
			for requirement in self.requirements
				print("* " + requirement)
			end for
		end function
		
		requirements = unsafeCheck.split("\* ");
		unsecureValueText = requirements.pull
		exploit.unsec_value = slice(unsecureValueText, unsecureValueText.indexOf("<b>")+3, unsecureValueText.indexOf("</b>"))
		//print("unsec_value: " + exploit.unsec_value)
		for requirement in requirements
			// todo parse requirement string to computer readable value
			exploit.requirements.push(requirement)
		end for
		
		exploitList.push(exploit)
		//print("pushed to queue:");
		//print(unsafeCheck);
	end for
	//print(mem)
	//print(addressScan)
end for
for i in range(0, exploitList.len - 1)
	print("Exploit " + i + " :")
	exploitList[i].printObject
end for
while( true )
	option = user_input("Select Exploit To use: ")
	if option == "exit" then break;
	option = option.to_int
	if typeof(option) != "number" or (option < 0 or option > exploitList.len-1) then
		print("Invalid input. Type a valid number")
	else 
		exploitResult = metaLib.overflow(exploitList[option].mem_address, exploitList[option].unsec_value, "123");
		keepRunning = handleExploitResult(exploitResult);
		if not keepRunning then break;
	end if
end while